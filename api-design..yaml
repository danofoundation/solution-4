openapi: 3.0.0
info:
  title: Questionnaire API
  description: API for managing questions, answers, and scores for users.
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DANDEV947366/test/1.0.0
  - url: http://localhost:5000
paths:
  /questions:
    get:
      summary: Retrieve questions with pagination and optional category filtering
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: category
          in: query
          description: Filter questions by category (optional)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
    post:
      summary: Store a list of questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Question'
      responses:
        '201':
          description: Questions stored successfully
  /questions_answers:
    post:
      summary: Store user answers to questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                answers:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserAnswer'
      responses:
        '201':
          description: Answers stored successfully
  /questions/{user_id}/category/score:
    get:
      summary: Retrieve scores by category for a specific user
      parameters:
        - name: user_id
          in: path
          description: ID of the user to retrieve scores for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Scores retrieved successfully
          content:
            application/json:
              schema:
                type: object 
  /users/{user_id}/overall-score:
    get:
      summary: Retrieve overall score for a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Overall score retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_score:
                    type: integer
        '404':
          description: User not found or overall score not available
  /process_scores:
    post:
      summary: Process user answers to calculate scores
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                answers:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserAnswer'
      responses:
        '200':
          description: Scores processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  scores:
                    type: object  # Adjust as per your actual response structure
  /analyze_scores:
    post:
      summary: Analyze user scores with an AI bot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                scores:
                  type: object
                  # Define structure based on how scores are analyzed
      responses:
        '200':
          description: Scores analyzed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  analysis_result:
                    type: string  # Adjust as per your actual response structure
  /send_score:
    post:
      summary: Send scores to a chat bot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                scores:
                  type: object
                  # Define structure based on how scores are sent to the chat bot
      responses:
        '200':
          description: Scores sent to the chat bot successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string  # Response message from the chat bot
components:
  schemas:
    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
    UserAnswer:
      type: object
      properties:
        question_id:
          type: integer
          format: int64
        answer:
          type: string  # Adjust as per your actual answer structure
