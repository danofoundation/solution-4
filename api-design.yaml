openapi: 3.0.0
info:
  title: Questionnaire API
  description: "API for managing questions, answers, and scores for users."
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/DANDEV947366/test/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:5000
paths:
  /questions:
    get:
      summary: Retrieve questions with pagination and optional category filtering
      parameters:
      - name: page
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
      - name: category
        in: query
        description: Filter questions by category (optional)
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A list of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
    post:
      summary: Store a list of questions
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Question'
        required: true
      responses:
        "201":
          description: Questions stored successfully
  /questions_answers:
    post:
      summary: Store user answers to questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questions_answers_body'
        required: true
      responses:
        "201":
          description: Answers stored successfully
  /questions/{user_id}/category/score:
    get:
      summary: Retrieve scores by category for a specific user
      parameters:
      - name: user_id
        in: path
        description: ID of the user to retrieve scores for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Scores retrieved successfully
          content:
            application/json:
              schema:
                type: object
  /users/{user_id}/overall-score:
    get:
      summary: Retrieve overall score for a user
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Overall score retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "404":
          description: User not found or overall score not available
  /users/categories:
    get:
      tags:
      - Categories
      summary: Retrieve categories
      responses:
        "200":
          description: Categories retrieved successfully
        "404":
          description: Categories not found
  /process_scores:
    post:
      summary: Process user answers to calculate scores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/process_scores_body'
        required: true
      responses:
        "200":
          description: Scores processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
  /analyze_scores:
    post:
      summary: Analyze user scores with an AI bot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analyze_scores_body'
        required: true
      responses:
        "200":
          description: Scores analyzed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
  /send_score:
    post:
      summary: Send scores to a chat bot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/send_score_body'
        required: true
      responses:
        "200":
          description: Scores sent to the chat bot successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
components:
  schemas:
    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
    UserAnswer:
      type: object
      properties:
        question_id:
          type: integer
          format: int64
        answer:
          type: string
    questions_answers_body:
      type: object
      properties:
        user_id:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/UserAnswer'
    inline_response_200:
      type: object
      properties:
        overall_score:
          type: integer
    process_scores_body:
      type: object
      properties:
        user_id:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/UserAnswer'
    inline_response_200_1:
      type: object
      properties:
        scores:
          type: object
    analyze_scores_body:
      type: object
      properties:
        user_id:
          type: string
        scores:
          type: object
    inline_response_200_2:
      type: object
      properties:
        analysis_result:
          type: string
    send_score_body:
      type: object
      properties:
        user_id:
          type: string
        scores:
          type: object
    inline_response_200_3:
      type: object
      properties:
        message:
          type: string
